print('question 1')
n=int(input('enter the number'))
sum = 0
for i in range(1, n+1):
    if (n % i == 0):
        sum = sum + i
if (sum/2 == n):
    print("The number is a Perfect number!")
else:
    print("The number is not a Perfect number!")


print('question 2')
a=input('enter string which you want to checks whether a passed string is palindrome or not.')
c =a.replace(" ","")
b=c[::-1]
if c==b:
    print('true')
else:
    print('false')

print('question 3')
def pascal_triangle(n):
   trow = [1]
   y = [0]
   for x in range(max(n,0)):
      print(trow)
      trow=[l+r for l,r in zip(trow+y, y+trow)]
   return n>=1
pascal_triangle(6)

print('question 4')
def ispangram(str):
   alphabet = "abcdefghijklmnopqrstuvwxyz"
   for char in alphabet:
      if char not in str.lower():
         return False
   return True
# main
string = 'The five boxing wizards jump quickly.'
if(ispangram(string) == True):
   print("Yes")
else:
   print("No")


print('question 5')
a=input('enter hyphen-separated sequence of words')
list=list
list = a.split('-')
list.sort()
print('-'.join(list))



print('question 6')

def student_data(student_id, **kwargs):
    print(f'\nStudent ID: {student_id}')
    if 'student_name' in kwargs:
        print(f"Student Name: $ {kwargs['student_name']}")

    if 'student_name' and 'student_class' in kwargs:
        print(f"\nStudent Name: $ {kwargs['student_name']}")
        print(f"Student Class: $ {kwargs['student_class']}")


student_data(student_id='SV12', student_name='Jean Garner')

student_data(student_id='SV12', student_name='Jean Garner', student_class='V')

print('question 7')


class Student:
    pass


class Marks:
    pass


student1 = Student()
marks1 = Marks()
print(isinstance(student1, Student))
print(isinstance(marks1, Student))
print(isinstance(marks1, Marks))
print(isinstance(student1, Marks))
print("\nCheck whether the said classes are subclasses of the built-in object class or not.")
print(issubclass(Student, object))
print(issubclass(Marks, object))


print('question 8')

def findTriplets(arr, n):
    found = False
    for i in range(0, n - 2):

        for j in range(i + 1, n - 1):

            for k in range(j + 1, n):

                if (arr[i] + arr[j] + arr[k] == 0):
                    print(arr[i], arr[j], arr[k])
                    found = True

    if (found == False):
        print(" not exist ")


arr = [-25, -10, -7, -3, 2, 4, 8, 10]
n = len(arr)
findTriplets(arr, n)

print('question 9')

class validity:

    def f(str):

        a = ['()', '{}', '[]']

        while any(i in str for i in a):

            for j in a:
                str = str.replace(j, '')

        return not str


s = input("enter : ")

print(s, "-", "is balanced"

if validity.f(s) else "is Unbalanced")
